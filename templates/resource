
from flask import redirect, render_template, request, url_for
from flask_login import current_user

from app.helpers.alert import add_alert, get_alert
from app.helpers.permission import permission
from app.models import [[entity.get_name()]][[entity.get_names_relationship_attributes()]], Setting, Alert
from app.helpers.forms import [[entity.get_name()]]Form

@permission('[[entity.get_name_delimited()]]_index')
def index():
    allowed_[[ entity.get_name_delimited() ]]_ids = None

    if not current_user.is_admin():
        allowed_[[ entity.get_name_delimited() ]]_ids = current_user.allowed_[[ entity.get_name_delimited() ]]_id_list()

    [[entity.get_name_plural_delimited()]] = [[entity.get_name()]].all_paginated(page=int(request.args.get('page', 1)),
                        per_page=Setting.get().items_per_page, ids=allowed_[[ entity.get_name_delimited() ]]_ids)
    
    return render_template("[[entity.get_name_delimited()]]/index.html", [[entity.get_name_plural_delimited()]]=[[entity.get_name_plural_delimited()]], alert=get_alert())


@permission('[[entity.get_name_delimited()]]_show')
def show(id):
    [[entity.get_name_delimited()]] = [[entity.get_name()]].get(id)
    
    if not [[entity.get_name_delimited()]]:
        add_alert(Alert("danger", "[[ main_json["message"]["not_exist"].format(entity.label.lower())]]"))
        return redirect(url_for("[[entity.get_name_delimited()]]_index"))

    return render_template("[[entity.get_name_delimited()]]/show.html", [[entity.get_name_delimited()]]=[[entity.get_name_delimited()]])

@permission('[[entity.get_name_delimited()]]_create')
def new():
    return render_template("[[entity.get_name_delimited()]]/new.html", form=[[entity.get_name()]]Form())

@permission('[[entity.get_name_delimited()]]_create')
def create():
    form = [[entity.get_name()]]Form(id=None)
    
    if not form.validate_on_submit():
        return render_template("[[entity.get_name_delimited()]]/new.html", form=form)
    
    [[entity.get_name_delimited()]] = [[entity.get_name()]]([[entity.get__list_args_resource()]])
[% if entity.is_user() %]
    [[entity.get_name_delimited()]].set_password(form.password.data)
[% endif %]
    [[entity.get_name_delimited()]].save()
    add_alert(Alert("success", f'[[ main_json["message"]["create"].format('{} "{{{}.{}}}"'.format(entity.label.lower(), entity.get_name_delimited(),entity.get_main_attribute().name))]]'))
    
    return redirect(url_for("[[entity.get_name_delimited()]]_index"))

@permission('[[entity.get_name_delimited()]]_update')
def edit(id):
    [[ entity.get_name_delimited() ]] = [[entity.get_name()]].get(id)
    
    if not [[entity.get_name_delimited()]]:
        add_alert(Alert("danger", "[[ main_json["message"]["not_exist"].format(entity.label.lower())]]"))
        return redirect(url_for("[[entity.get_name_delimited()]]_index"))

    form = [[entity.get_name()]]Form(obj=[[entity.get_name_delimited()]])
[% for attribute in entity.get_relationship_attributes_for_form() %]
    [% if not attribute.is_required() %]if [[ entity.get_name_delimited() ]].[[ attribute.name ]] is not None:
        [% endif %]form.[[ attribute.name ]].data = [[ entity.get_name_delimited() ]].[[ attribute.name ]].[% if attribute.type.has_cardinality_one() %]id[% else %]collect(lambda each: each.id)[% endif %]
    
[% endfor %]

    return render_template("[[entity.get_name_delimited()]]/edit.html", [[entity.get_name_delimited()]]=[[entity.get_name_delimited()]], form=form)

@permission('[[entity.get_name_delimited()]]_update')
def update(id):
    [[entity.get_name_delimited()]] = [[entity.get_name()]].get(id)
    
    if not [[entity.get_name_delimited()]]:
        add_alert(Alert("danger", "[[ main_json["message"]["not_exist"].format(entity.label.lower())]]"))
        return redirect(url_for("[[entity.get_name_delimited()]]_index"))
    
    form = [[entity.get_name()]]Form(id=id)
    
    if not form.validate_on_submit():
        return render_template("[[entity.get_name_delimited()]]/edit.html", [[entity.get_name_delimited()]]=[[entity.get_name_delimited()]], form=form)

[% if entity.is_user() %]
    [[entity.get_name_delimited()]].set_password(form.password.data)
[% endif %]
    [[entity.get_name_delimited()]].update([[entity.get__list_args_resource()]])
    add_alert(Alert("success", f'[[ main_json["message"]["modified"].format('{} "{{{}.{}}}"'.format(entity.label.lower(), entity.get_name_delimited(),entity.get_main_attribute().name))]]'))
    
    return redirect(url_for("[[entity.get_name_delimited()]]_index"))

@permission('[[entity.get_name_delimited()]]_delete')
def delete(id):
    [[entity.get_name_delimited()]] = [[entity.get_name()]].get(id)
    
    if not [[entity.get_name_delimited()]] or [[entity.get_name_delimited()]].is_deleted:
        add_alert(Alert("danger", "[[ main_json["message"]["not_exist"].format(entity.label.lower())]]"))
    else:
        [[entity.get_name_delimited()]].remove()
        add_alert(Alert("success", f'[[ main_json["message"]["deleted"].format('{} "{{{}.{}}}"'.format(entity.label.lower(), entity.get_name_delimited(),entity.get_main_attribute().name))]]'))
    
    return redirect(url_for("[[entity.get_name_delimited()]]_index"))
