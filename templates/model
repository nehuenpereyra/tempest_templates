
from sqlalchemy.ext.hybrid import hybrid_property

from app.db import db
[% if entity.is_user() %]
from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash
[% endif %] 
[% for import_element in entity.get_import_list_for_model() %]
[[ import_element ]]
[% endfor %]

[% if entity.is_user() %]
def get_permission_method(user, permission):

    permission = "_".join(permission.split("_")[0:-1])

    permission_mapper = {
        "user": user.allowed_user_id_list,
        "role": user.allowed_role_id_list,
        "permission": user.allowed_permission_id_list
    }

    return permission_mapper[permission]
[% endif %]

class [[entity.get_name()]]([% if entity.is_user() %]UserMixin, [% endif%]db.Model):

    __id = db.Column("id", db.Integer, primary_key=True)
[% for attribute in entity.attributes %]
    [[ attribute.to_model() ]]
[% endfor %]
    __is_deleted = db.Column("is_deleted", db.Boolean, nullable=False, default=False)

    @hybrid_property
    def id(self):
        return self.__id

[% for attribute in entity.attributes %]
[% if attribute.type.is_relationship() and attribute.type.has_cardinality_many() %]
    @hybrid_property
    def [[ attribute.name ]](self):
        if not isinstance(self.__[[ attribute.name ]], list):
            return self.__[[ attribute.name ]]
        
        return self.__[[ attribute.name ]].select(lambda each: not each.is_deleted)

    @[[ attribute.name ]].setter
    def [[ attribute.name ]](self, [[ attribute.name ]]):
        self.__[[ attribute.name ]] = self.__[[ attribute.name ]].select(lambda each: each.is_deleted) + [[ attribute.name ]]
[% elif entity.is_user() and attribute.name == "password" %]
    @hybrid_property
    def password(self):
        return self.__password
    
    @password.setter
    def password(self, password):
        self.__password = generate_password_hash(password)
[% else %]
    @hybrid_property
    def [[ attribute.name ]](self):
        return self.__[[ attribute.name ]]
    
    @[[ attribute.name ]].setter
    def [[ attribute.name ]](self, [[ attribute.name ]]):
        self.__[[ attribute.name ]] = [[ attribute.name ]]
[% endif %]
    
[% endfor %]
    @hybrid_property
    def is_deleted(self):
        return self.__is_deleted
    
[% if entity.is_user() %]
    @classmethod
    def login(self, username, password):
        user = User.query.filter_by(username=username).first()
        if user and (check_password_hash(user.__password, password)):
            return user
        return None
    
    def is_admin(self):
        return self.roles.any_satisfy(lambda each: each.name == "Administrador")

    def has_permission_for(self, permission, id):
        has_permission = self.roles.flat_collect(lambda each: each.permissions). \
            any_satisfy(lambda each: each.name == permission)

        if not has_permission:
            return False
        elif not id:
            return True

        allowed_id_list_method = get_permission_method(
            self, permission)

        allowed_id_list = allowed_id_list_method()

        if allowed_id_list is None:
            return True

        return allowed_id_list.includes(id)

    def allowed_user_id_list(self):
        return [self.__id]

    def allowed_role_id_list(self):
        return self.roles.collect(lambda each: each.id)

    def allowed_permission_id_list(self):
        return self.roles.flat_collect(lambda each: each.permissions). \
            remove_duplicated(). \
            collect(lambda each: each.id)

[% endif%]
    def save(self):
        if not self.__id:
            db.session.add(self)
        db.session.commit()

    def update(self, [[ ", ".join(entity.get_list_of_loadable_argument_names()) ]]):
[% for attribute in entity.get_loadable_attributes() %]
        self.[[ attribute.name ]] = [[ attribute.name ]]
[% endfor %]
        
        self.save()

    def remove(self):
        if self.__id:
            self.__is_deleted = True
            self.save()

    @classmethod
    def all(self):
        return self.query.filter_by(is_deleted=False).order_by(self.__[[ entity.get_main_attribute().name]].asc()).all()

    @classmethod
    def all_paginated(self, page, per_page, ids=None):
        query = self.query.filter_by(is_deleted=False).order_by(self.__[[ entity.get_main_attribute().name]].asc())
        if ids:
            query = query.filter(self.__id.in_(ids))
        return query.paginate(page=page, per_page=per_page, error_out=False)

[% if entity.has_seeker %]
    @classmethod
    def search(self, search_field, search_query, page, per_page, ids=None):
        query = self.query \
            .filter_by(is_deleted=False) \
            .order_by(self.__[[ entity.get_main_attribute().name]].asc()) \
            .filter(getattr(self, search_field).like(f"%{search_query}%"))
        if ids:
            query = query.filter(self.__id.in_(ids))
        return query.paginate(page=page, per_page=per_page, error_out=False)

[% endif %]
    @classmethod
    def get(self, id):
        [[ entity.get_name_delimited() ]] = self.query.get(id)
        if not [[ entity.get_name_delimited() ]] or [[ entity.get_name_delimited() ]]._[[ entity.get_name() ]]__is_deleted:
            return None
        
        return [[ entity.get_name_delimited() ]]
    
    @classmethod
    def get_all(self, ids):
        return self.query.filter_by(is_deleted=False).filter(self.__id.in_(ids)).all()
