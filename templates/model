
from app.db import db
[% if entity.is_user() %]
from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash
[% endif%] 
[% for import_element in entity.get_import_list_for_model() %]
[[ import_element ]]
[% endfor %]

[% if entity.is_user() %]
def get_permission_method(user, permission):

    permission_mapper = {
        "user": user.allowed_user_id_list,
        "role": user.allowed_role_id_list,
        "permission": user.allowed_permission_id_list,
        "request": user.allowed_request_id_list,
        "career": user.allowed_career_id_list,
        "cathedra": user.allowed_cathedra_id_list,
        "office": user.allowed_office_id_list,
        "charge": user.allowed_charge_id_list,
        "employee": user.allowed_employee_id_list,
        "job_position": user.allowed_job_position_id_list,
        "request_type": user.allowed_request_type_id_list
    }

    return permission_mapper[permission]
[% endif %]

class [[entity.get_name()]]([% if entity.is_user() %]UserMixin, [% endif%]db.Model):

    id = db.Column("id", db.Integer, primary_key=True)
[% for attribute in entity.attributes %]
    [[ attribute.to_model() ]]
[% endfor %]
    is_deleted = db.Column(db.Boolean, nullable=False, default=False)

[% for attribute in entity.get_many_relationship_attributes() %]
    def get_[[ attribute.name ]](self):
        return self.[[ attribute.name ]].select(lambda each: not each.is_deleted)

    def set_[[ attribute.name ]](self, [[ attribute.name ]]):
        self.[[ attribute.name ]] = self.[[ attribute.name ]].select(
            lambda each: each.is_deleted) + [[ attribute.name ]]
[% endfor %]

    def save(self):
        if not self.id:
            db.session.add(self)
        db.session.commit()

    def update(self, [[ ", ".join(entity.get_list_of_loadable_argument_names()) ]]):
[% for attribute in entity.get_loadable_attributes() %]
[% if attribute.type.is_relationship() and attribute.type.has_cardinality_many() %]
        self.set_[[ attribute.name ]]([[ attribute.name ]])
[% else %]
        self.[[ attribute.name ]] = [[ attribute.name ]]
[% endif %]
[% endfor %]
        self.save()

    def remove(self):
        if self.id:
            self.is_deleted = True
            self.save()

    @classmethod
    def delete(self, id):
        [[ entity.get_name_delimited() ]] = self.query.get(id)
        if [[ entity.get_name_delimited() ]]:
            [[ entity.get_name_delimited() ]].remove()
            return [[ entity.get_name_delimited() ]]
        return None

    @classmethod
    def all(self):
        query = self.query
        query = query.filter_by(is_deleted=False)
        query = query.order_by(self.[[ entity.get_main_attribute().name]].asc())
        return query.all()

    @classmethod
    def all_paginated(self, page, per_page, ids=None):
        query = self.query
        query = query.filter_by(is_deleted=False)
        query = query.order_by(self.[[ entity.get_main_attribute().name]].asc())
        if ids:
            query = query.filter(self.id.in_(ids))
        return query.paginate(page=page, per_page=per_page, error_out=False)

    @classmethod
    def get(self, id):
        [[entity.get_name_delimited()]] = self.query.get(id)
        return [[entity.get_name_delimited()]] if [[entity.get_name_delimited()]] and [[entity.get_name_delimited()]].is_deleted==False else None
        

    @classmethod
    def get_all(self, ids):
        if not ids:
            return []
        query = self.query
        query = query.filter_by(is_deleted=False)
        return query.filter(self.id.in_(ids)).all()

[% for attribute in entity.attributes %][% if attribute.searchable %]
    @classmethod
    def find_by_[[ attribute.name ]](self, [[ attribute.name ]]):
        query = self.query.order_by([[ attribute.type.get_order_query_for_model() ]].asc())
        return query.filter_by([[ attribute.name ]]=[[ attribute.name ]], is_deleted=False).all()

[% endif %][% endfor %]
[% if entity.is_user() %]
    def set_password(self, password):
        self.password = generate_password_hash(password)

    @staticmethod
    def login(username, password):
        user = User.query.filter_by(username=username).first()
        if user and (check_password_hash(user.password, password)):
            return user
        return None
    
    def is_admin(self):
        return self.roles.any_satisfy(lambda each: each.name == "Administrador")

    def has_permission_for(self, permission, id):
        has_permission = self.roles.flat_collect(lambda each: each.permissions). \
            any_satisfy(lambda each: each.name == permission)

        if not has_permission:
            return False
        elif not id or self.is_admin():
            return True

        allowed_id_list_method = get_permission_method(
            self, permission.split("_").first())

        allowed_id_list = allowed_id_list_method()

        if allowed_id_list is None:
            return True

        return allowed_id_list.includes(id)

    def allowed_user_id_list(self):
        return [self.id]

    def allowed_role_id_list(self):
        return self.roles.collect(lambda each: each.id)

    def allowed_permission_id_list(self):
        return self.roles.flat_collect(lambda each: each.permissions). \
            remove_duplicated(). \
            collect(lambda each: each.id)

    def allowed_request_id_list(self):
        return self.requests.collect(lambda each: each.id)
    
    def allowed_request_type_id_list(self):
        return None

    def allowed_career_id_list(self):
        return None

    def allowed_cathedra_id_list(self):
        return None

    def allowed_office_id_list(self):
        return None

    def allowed_charge_id_list(self):
        return None

    def allowed_employee_id_list(self):
        return None

    def allowed_job_position_id_list(self):
        return None

[% endif%] 