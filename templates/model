
from app.db import db

[% for import_element in entity.get_import_list_for_model() %]
[[ import_element ]]
[% endfor %]

class [[entity.get_name()]](db.Model):

    id = db.Column("id", db.Integer, primary_key=True)
[% for attribute in entity.attributes %]
    [[ attribute.to_model() ]]
[% endfor %]
    is_deleted = db.Column(db.Boolean, nullable=False, default=False)

    def save(self):
        if not self.id:
            db.session.add(self)
        db.session.commit()

    def update(self, [[ ", ".join(entity.get_list_of_loadable_argument_names()) ]]):
[% for attribute in entity.get_loadable_attributes() %]
        self.[[ attribute.name ]] = [[ attribute.name ]]
[% endfor %]
        self.save()

    def remove(self):
        if self.id:
            self.is_deleted = True
            self.save()

    @staticmethod
    def delete(id):
        [[ entity.get_name_delimited() ]] = [[ entity.get_name() ]].query.get(id)
        if [[ entity.get_name_delimited() ]]:
            [[ entity.get_name_delimited() ]].remove()
            return [[ entity.get_name_delimited() ]]
        return None

    @staticmethod
    def all():
        query = [[ entity.get_name() ]].query
        query = query.filter_by(is_deleted=False)
        query = query.order_by([[ entity.get_name() ]].[[ entity.get_main_attribute().name]].asc())
        return query.all()

    @staticmethod
    def all_paginated(page, per_page, ids=None):
        query = [[ entity.get_name() ]].query
        query = query.filter_by(is_deleted=False)
        query = query.order_by([[ entity.get_name() ]].[[ entity.get_main_attribute().name]].asc())
        if ids:
            query = query.filter([[ entity.get_name() ]].id.in_(ids))
        return query.paginate(page=page, per_page=per_page, error_out=False)

    @staticmethod
    def get(id):
        [[entity.get_name_delimited()]] = [[ entity.get_name() ]].query.get(id)
        return [[entity.get_name_delimited()]] if [[entity.get_name_delimited()]] and [[entity.get_name_delimited()]].is_deleted==False else None
        

    @staticmethod
    def get_all(ids):
        query = [[ entity.get_name() ]].query
        query = query.filter_by(is_deleted=False)
        return query.filter([[ entity.get_name() ]].id.in_(ids)).all()

[% for attribute in entity.attributes %][% if attribute.searchable %]
    @staticmethod
    def find_by_[[ attribute.name ]]([[ attribute.name ]]):
        query = [[ entity.get_name() ]].query.order_by([[ attribute.type.get_order_query_for_model() ]].asc())
        return query.filter_by([[ attribute.name ]]=[[ attribute.name ]], is_deleted=False)

[% endif %][% endfor %]